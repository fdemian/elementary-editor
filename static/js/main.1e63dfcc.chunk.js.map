{"version":3,"sources":["lib/Editor/TextElements/Latex/insertTeXBlock.js","lib/Editor/TextElements/Latex/Buttons.js","lib/Editor/TextElements/Latex/KatexOutput.js","lib/Editor/TextElements/Latex/TeXBlock.js","lib/Editor/TextElements/Spoiler/Spoiler.js","lib/Editor/TextElements/Spoiler/SpoilerWrapper.js","lib/Editor/TextElements/Media/Media.js","lib/Editor/TextElements/Link/RenderLink.js","lib/Editor/TextElements/Link/Link.js","lib/Editor/EditorStyles.js","lib/Editor/TextElements/Latex/LatexBlock.js","lib/DraftRenderer/Renderers.js","lib/DraftRenderer/DraftRenderer.js","lib/Editor/TextElements/QuoteBlock/QuoteBlock.js","lib/Editor/TextElements/QuoteBlock/QuoteBlockWrapper.js","lib/Editor/StyleButton.js","lib/Editor/URLInput.js","lib/Editor/Controls.js","lib/Editor/BaseEditor.js","lib/Editor/utils.js","lib/Editor/Editor.js","lib/Editor/TextElements/Latex/removeTeXBlock.js","App.js","index.js"],"names":["defaultContent","content","getTexBlock","type","mutability","EditorButtons","invalid","removeFn","saveFn","Group","size","style","marginLeft","onClick","name","faTimes","disabled","icon","faCheck","KatexOutput","props","timer","this","update","nextProps","clearTimeout","setTimeout","katex","render","container","displayMode","role","ref","c","Component","TextArea","Input","TeXBlock","state","editMode","setState","texValue","getValue","startEdit","onValueChange","evt","value","target","__parse","e","invalidTeX","save","entityKey","block","getEntityAt","newContentState","contentState","mergeEntityData","finishEdit","bind","remove","blockProps","onRemove","getKey","onStartEdit","onFinishEdit","getEntity","getData","texContent","className","editPanel","rows","width","onChange","React","Spoiler","useState","textStatus","setTextStatus","cssClass","newStatus","text","SpoilerWrapper","decoratedText","Media","src","undefined","entity","getType","alt","url","playing","RenderLink","href","rel","Link","Entity","get","children","EditorState","Draft","RichUtils","AtomicBlockUtils","insertMedia","editorState","getCurrentContent","createEntity","getLastCreatedEntityKey","insertAtomicBlock","EditorStyles","BLOCK_TYPES","label","faQuoteLeft","faHeading","faList","faListOl","faCode","INLINE_STYLES","faBold","faItalic","faUnderline","faStrikethrough","CUSTOM_STYLES","toggleFn","contentStateWithEntity","newEditorState","set","currentContent","newStateSelection","getSelection","toggleLink","requiresInput","requiresSelection","faLink","selection","isCollapsed","faUnlink","faImage","faEye","faVideo","faCalculator","LatexBlock","styles","code","backgroundColor","fontFamily","fontSize","padding","codeBlock","listItem","float","addBreaklines","map","child","renderers","inline","BOLD","ITALIC","UNDERLINE","CODE","blocks","unstyled","blockquote","key","entities","Image","data","LINK","LATEX","SPOILER","Video","QuoteBlock","comment","RenderWarning","Renderer","raw","rendered","redraft","rawContent","JSON","parse","cite","author","QuoteBlockWrapper","StyleButton","onToggle","activeFn","getInput","iconStyle","color","marginTop","placement","title","blockName","preventDefault","URLInput","changeFn","urlValue","confirmFn","cancelFn","hintText","toLowerCase","placeholder","marginRight","EditorControls","editorStyles","blockIsActive","inlineIsActive","customBlockIsActive","customBlockToggleFn","onToggleInline","onToggleBlock","confirmInput","onInputChange","showInput","cancelInput","inputVisible","inputType","inputValue","BaseEditor","config","AltEditor","altEditor","blockStyleFn","getBlockStyle","blockRendererFn","blockRenderMap","handleKeyCommand","reference","spellCheck","readOnly","blockStyle","filterStyle","listToFilter","filter","indexOf","CompositeDecorator","ContentState","DefaultDraftBlockRenderMap","convertToRaw","convertFromRaw","Map","element","extendedBlockRenderMap","merge","EditorComponent","initialStateEditor","initialState","containerRef","decorator","strategy","contentBlock","callback","findEntityRanges","character","findLinkEntities","component","findSpoilerEntities","createEmpty","createWithContent","parsedState","texEdits","setTexEdits","setEditorState","setInputVisible","setInputType","setInputValue","focus","console","log","_editorStyles","filterStyles","allowedStyles","filterWhiteListedStyles","getContent","getPlainText","removeTex","blockKey","getBlockForKey","targetRange","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","withoutTeX","Modifier","removeRange","resetBlock","setBlockType","getSelectionAfter","newState","push","forceSelection","removeTeXBlock","selectionIsCollapsed","findStyleObjectByName","toggleCustomStyle","styleObject","toUpperCase","selectionState","insertEntity","getStartKey","start","getStartOffset","end","getEndOffset","selectedText","getText","slice","getImmutableSelectionBlock","insertCustomBlock","hasText","getBlockMap","first","clear","emptyState","createFromText","clearedState","useImperativeHandle","height","blockType","toggleBlockType","inlineStyle","toggleInlineStyle","selectionCollapsed","currentStyle","getCurrentInlineStyle","has","editor","tabIndex","editable","texEditState","editorContent","insertTex","command","count","ButtonGroup","Button","editorProps","default","description","editorPropsColumns","dataIndex","editorMethodsColumns","editorMethods","parameters","App","useRef","theme","id","columns","dataSource","pagination","current","currentState","jsonState","stringify","plaintext","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e63dfcc.chunk.js","sourcesContent":["const defaultContent = { content: 'f(x) = ... ' };\r\n\r\nconst getTexBlock = () => {\r\n   return {\r\n     type:'LATEX' ,\r\n     mutability:'Immutable',\r\n     content: defaultContent\r\n   };\r\n}\r\n\r\nexport default getTexBlock;\r\n","import React from 'react'\r\nimport { Button } from 'antd'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faTimes,\r\n  faCheck\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst EditorButtons = ({ invalid, removeFn, saveFn }) => {\n  if (invalid) {\r\n    return (\r\n    <Button.Group size='large' style={{ marginLeft: '40%' }}>\r\n      <Button type='danger' onClick={removeFn}>\r\n        <FontAwesomeIcon name={faTimes} size='lg' />\r\n        &nbsp; Remove\r\n      </Button>\r\n      <Button disabled>\r\n        Invalid TeX\r\n      </Button>\r\n    </Button.Group>\r\n    )\r\n  }\r\n\r\n  return (\r\n  <Button.Group size='large' style={{ marginLeft: '40%' }}>\r\n    <Button type='danger' onClick={removeFn}>\r\n      <FontAwesomeIcon icon={faTimes} />\r\n      &nbsp; Remove\r\n    </Button>\r\n    <Button type='primary' onClick={saveFn}>\r\n      Done &nbsp;\r\n      <FontAwesomeIcon icon={faCheck} />\r\n    </Button>\r\n  </Button.Group>\r\n  )\r\n}\r\n\r\nexport default EditorButtons\r\n","import React, { Component } from 'react'\r\nimport katex from 'katex'\r\n\r\nclass KatexOutput extends Component {\n  constructor (props) {\r\n    super(props)\r\n    this.timer = null\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.update()\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps.content !== this.props.content) {\r\n      this.update()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearTimeout(this.timer)\r\n    this.timer = null\r\n  }\r\n\r\n  update () {\r\n    if (this.timer) {\r\n      clearTimeout(this.timer)\r\n    }\r\n\r\n    this.timer = setTimeout(() => {\r\n      katex.render(\r\n        this.props.content,\r\n        this.container,\r\n        { displayMode: true }\r\n      )\r\n    }, 0)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div\r\n        role='presentation'\r\n        ref={(c) => { this.container = c }}\r\n        onClick={this.props.onClick}\r\n      />)\r\n  }\r\n}\r\n\r\nexport default KatexOutput\r\n","/**\r\n * Copyright (c) 2013-present, Facebook, Inc. All rights reserved.\r\n *\r\n * This file provided by Facebook is for non-commercial testing and evaluation\r\n * purposes only. Facebook reserves all rights not expressly granted.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nimport katex from 'katex'\r\nimport React from 'react'\r\nimport { Input } from 'antd'\r\nimport EditorButtons from './Buttons'\r\nimport KatexOutput from './KatexOutput'\r\n\r\nconst { TextArea } = Input\r\n\r\nexport default class TeXBlock extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { editMode: false }\r\n\r\n    this.onClick = () => {\r\n      if (this.state.editMode) {\r\n        return\r\n      }\r\n\r\n      this.setState({\r\n        editMode: true,\r\n        texValue: this.getValue()\r\n      }, () => {\r\n        this.startEdit()\r\n      })\r\n    }\r\n\r\n    this.onValueChange = (evt) => {\r\n      const { value } = evt.target\r\n      let invalid = false\r\n      try {\r\n        /* eslint-disable */\r\n        katex.__parse(value);\r\n        /* eslint-enable */\r\n      } catch (e) {\r\n        invalid = true\r\n      } finally {\r\n        this.setState({\r\n          invalidTeX: invalid,\r\n          texValue: value\r\n        })\r\n      }\r\n    }\r\n\r\n    this.save = () => {\r\n      const entityKey = this.props.block.getEntityAt(0)\r\n      const { contentState } = this.props\r\n      const newContentState = contentState.mergeEntityData(\r\n        entityKey,\r\n        { content: this.state.texValue }\r\n      )\r\n      this.setState({\r\n        invalidTeX: false,\r\n        editMode: false,\r\n        texValue: null\r\n      }, this.finishEdit.bind(this, newContentState))\r\n    }\r\n\r\n    this.remove = () => {\r\n      this.props.blockProps.onRemove(this.props.block.getKey())\r\n    }\r\n    this.startEdit = () => {\r\n      this.props.blockProps.onStartEdit(this.props.block.getKey())\r\n    }\r\n    this.finishEdit = (newContentState) => {\r\n      this.props.blockProps.onFinishEdit(this.props.block.getKey(), newContentState)\r\n    }\r\n  }\r\n\r\n  getValue () {\r\n    return this.props.contentState\r\n      .getEntity(this.props.block.getEntityAt(0))\r\n      .getData().content\r\n  }\r\n\r\n  render () {\n    let texContent = null\r\n\r\n    if (this.state.editMode) {\r\n      texContent = (this.state.invalidTeX ? '' : this.state.texValue)\r\n    } else {\r\n      texContent = this.getValue()\r\n    }\r\n\r\n    let className = 'TeXEditor-tex'\r\n    if (this.state.editMode) {\r\n      className += ' TeXEditor-activeTeX'\r\n    }\r\n\r\n    let editPanel = null\r\n    if (this.state.editMode) {\n      editPanel =\r\n        (\r\n          <div>\r\n\r\n            <TextArea\r\n              rows={2}\r\n              style={{ width: '20%', marginLeft: '40%' }}\r\n              onChange={this.onValueChange}\r\n              value={this.state.texValue}\r\n            />\r\n\r\n            <div>\r\n              <EditorButtons\r\n                invalid={this.state.invalidTeX}\r\n                removeFn={this.remove}\r\n                saveFn={this.save}\r\n              />\r\n            </div>\r\n\r\n          </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n      <div className={className}>\r\n        <KatexOutput content={texContent} onClick={this.onClick} />\r\n        {editPanel}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport './Spoiler.css';\r\n\r\nconst Spoiler = (props) => {\r\n\r\n  const [textStatus, setTextStatus] = useState('Concealed');\r\n  const cssClass = `Spoiler ${textStatus}`;\r\n  const changeStatus = () => {\r\n   const newStatus = textStatus === '' ? 'Concealed' : ''\r\n   setTextStatus({newStatus});\r\n  };\r\n\r\n  return (\r\n  <span\r\n    className={cssClass}\r\n    onClick={changeStatus}\r\n    role='presentation'\r\n  >\r\n    {props.text}\r\n  </span>\r\n  )\r\n}\r\n\r\nexport default Spoiler\r\n","import React from 'react'\r\nimport Spoiler from './Spoiler'\r\n\r\nconst SpoilerWrapper = ({ decoratedText }) => (\r\n  <Spoiler text={decoratedText} />\r\n)\r\n\r\nexport default SpoilerWrapper\r\n","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\nconst Media = (props) => {\r\n\r\n  let src;\r\n  const { contentState, block } = props;\r\n\r\n  if(contentState !== null && contentState !== undefined) {\r\n    const entity = contentState.getEntity(block.getEntityAt(0))\r\n    src = entity.getData().src;\r\n\r\n    if(entity.getType() === \"Image\")\r\n      return <img src={src} alt=\"\" />;    \r\n  }\r\n  else {\r\n    src = props.src;\r\n  }\r\n\r\n  return(<ReactPlayer url={src} playing={false} />);\r\n}\r\n\r\nexport default Media;\r\n","import React from 'react'\r\n\r\nconst RenderLink = ({ url, text }) => (\r\n  <a href={url} rel='nofollow'>\r\n    {text}\r\n  </a>\r\n)\r\n\r\nexport default RenderLink\r\n","import React from 'react'\r\nimport { Entity } from 'draft-js'\r\nimport RenderLink from './RenderLink'\r\n\r\nconst Link = (props) => {  \r\n  const { url } = Entity.get(props.entityKey).getData()\r\n\r\n  return <RenderLink url={url} text={props.children} />\r\n}\r\n\r\nexport default Link\r\n","import Draft from 'draft-js'\r\n\r\n// Font awesome icons.\r\nimport {\r\n  faQuoteLeft,\r\n  faHeading,\r\n  faList,\r\n  faListOl,\r\n  faCode,\r\n  faBold,\r\n  faItalic,\r\n  faUnderline,\r\n  faStrikethrough,\r\n  faLink,\r\n  faUnlink,\r\n  faImage,\r\n  faEye,\r\n  faVideo,\r\n  faCalculator\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst {\r\n  EditorState,\r\n  RichUtils,\r\n  AtomicBlockUtils\r\n} = Draft\r\n\r\n/* ----------------------------------------- */\r\n\r\nexport const insertMedia = (editorState, type, value) => {\r\n\r\n  const contentState = editorState.getCurrentContent();\r\n  const contentStateWithEntity = contentState.createEntity(type, 'IMMUTABLE', { src: value });\r\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n  \r\n  const mediaBlock = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, type);\r\n\r\n  return mediaBlock;\r\n}\r\n\r\n/*\r\nexport function insertQuote (editor, type, value) {\r\n  const { editorState } = editor.state\r\n  const contentState = editorState.getCurrentContent()\r\n  const params = { text: value.text, author: value.author }\r\n  const contentStateWithEntity = contentState.createEntity(type, 'IMMUTABLE', params)\r\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\r\n\r\n  editor.setState(\r\n    {\r\n      editorState: AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, 'QuoteBlock')\r\n    },\r\n    () => { setTimeout(() => editor.focus(), 0) }\r\n  )\r\n}*/\r\n\r\nexport const insertLink = (editorState, type, value) => {\r\n  const contentState = editorState.getCurrentContent();\r\n  const contentStateWithEntity = contentState.createEntity('LINK', 'MUTABLE', { url: value });\r\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n\r\n  //\r\n  const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity })\r\n  const newStateSelection = newEditorState.getSelection()\r\n  const linkState = RichUtils.toggleLink(newEditorState, newStateSelection, entityKey);\r\n\r\n  return linkState;\r\n}\r\n\r\nexport const removeLink = (editorState) => {\r\n  const selection = editorState.getSelection()\r\n\r\n  if (!selection.isCollapsed()) {\r\n    return RichUtils.toggleLink(editorState, selection, null);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/*\r\nexport function insertSpoiler (editor) {\r\n  const { editorState } = editor.state\r\n  const selection = editorState.getSelection()\r\n  const contentBlock = editorState.getCurrentContent().getBlockForKey(selection.getStartKey())\r\n  const selectionState = editorState.getSelection()\r\n  const start = selectionState.getStartOffset()\r\n  const end = selectionState.getEndOffset()\r\n  const selectedText = contentBlock.getText().slice(start, end)\r\n  const contentState = editorState.getCurrentContent()\r\n\r\n  const contentStateWithEntity = contentState.createEntity('SPOILER', 'IMMUTABLE', { text: selectedText })\r\n  insertEntity(editor, editorState, contentStateWithEntity)\r\n}*/\r\n\r\n/* ------------------- */\r\n\r\nconst BLOCK_TYPES =\r\n[\r\n  { label: 'Quote', style: 'blockquote', icon: faQuoteLeft },\r\n  { label: 'Heading', style: 'header-two', icon: faHeading },\r\n  { label: 'Unordered List', style: 'unordered-list-item', icon: faList },\r\n  { label: 'Ordered List', style: 'ordered-list-item', icon: faListOl },\r\n  { label: 'Code Block', style: 'code-block', icon: faCode }\r\n]\r\n\r\nconst INLINE_STYLES =\r\n[\r\n  { label: 'Bold', style: 'BOLD', icon: faBold },\r\n  { label: 'Italic', style: 'ITALIC', icon: faItalic },\r\n  { label: 'Underline', style: 'UNDERLINE', icon: faUnderline },\r\n  { label: 'Strikethrough', style: 'STRIKETHROUGH', icon: faStrikethrough }\r\n]\r\n\r\nconst CUSTOM_STYLES =\r\n[\r\n  {\r\n    label: 'Link',\r\n    style: 'Link',\r\n    toggleFn: insertLink,\r\n    requiresInput: true,\r\n    requiresSelection: true,\r\n    icon: faLink\r\n  },\r\n  {\r\n    label: 'Remove Link',\r\n    style: 'LinkRemove',\r\n    toggleFn: removeLink,\r\n    requiresInput: false,\r\n    requiresSelection: false,\r\n    icon: faUnlink\r\n  },\r\n  {\r\n    label: 'Image',\r\n    style: 'Image',\r\n    toggleFn: insertMedia,\r\n    requiresInput: true,\r\n    requiresSelection: false,\r\n    icon: faImage\r\n  },\r\n  {\r\n    label: 'Spoiler',\r\n    style: 'Spoiler',\r\n    //toggleFn: insertSpoiler,\r\n    requiresInput: false,\r\n    requiresSelection: true,\r\n    icon: faEye\r\n  },\r\n  {\r\n    label: 'Video',\r\n    style: 'Video',\r\n    toggleFn: insertMedia,\r\n    requiresInput: true,\r\n    requiresSelection: false,\r\n    icon: faVideo\r\n  },\r\n  {\r\n    label: 'Latex',\r\n    style: 'Latex',\r\n    //toggleFn: insertTex,\r\n    requiresInput: false,\r\n    requiresSelection: false,\r\n    icon: faCalculator\r\n  }\r\n];\r\n\r\nconst EditorStyles = { BLOCK_TYPES, INLINE_STYLES, CUSTOM_STYLES };\r\n\r\nexport default EditorStyles;\r\n","import React, { Component } from 'react'\r\nimport katex from 'katex'\r\n\r\nclass LatexBlock extends Component {\n  constructor (props) {\r\n    super(props)\r\n    this.timer = null\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.update()\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps.content !== this.props.content) {\r\n      this.update()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearTimeout(this.timer)\r\n    this.timer = null\r\n  }\r\n\r\n  update () {\n    if (this.timer) {\r\n      clearTimeout(this.timer)\r\n    }\r\n\r\n    this.timer = setTimeout(() => {\r\n      katex.render(\r\n        this.props.content,\r\n        this.container,\r\n        { displayMode: true }\r\n      )\r\n    }, 0)\n  }\r\n\r\n  render () {\r\n    return <span ref={(c) => { this.container = c }} />\r\n  }\r\n}\r\n\r\nexport default LatexBlock\r\n","import React from 'react'\r\nimport Spoiler from '../Editor/TextElements/Spoiler/Spoiler'\r\nimport LatexBlock from '../Editor/TextElements/Latex/LatexBlock'\r\nimport Media from '../Editor/TextElements/Media/Media'\r\nimport QuoteBlock from '../Editor/TextElements/QuoteBlock/QuoteBlock'\r\nimport RenderLink from '../Editor/TextElements/Link/RenderLink'\r\n\r\n/* Style callbacks */\r\nconst styles = {\r\n  code: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2\r\n  },\r\n  codeBlock: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 20\r\n  },\r\n  listItem: {\r\n    float: 'none'\r\n  }\r\n}\r\n\r\n// Adds a <br /> after a block.\r\nconst addBreaklines = children => children.map(child => [child, <br />])\r\n\r\nconst renderers = {\r\n\r\n  /* Inline Styles */\r\n  inline: {\r\n    BOLD: children => <strong>{children}</strong>,\r\n    ITALIC: children => <em>{children}</em>,\r\n    UNDERLINE: children => <u>{children}</u>,\r\n    CODE: children => <span style={styles.code}>{children}</span>\r\n  },\r\n\r\n  /* Block Styles */\r\n  blocks: {\r\n    unstyled: children => children.map(child => <p>{child}</p>),\r\n    blockquote: children => <blockquote key={1}>{addBreaklines(children)}</blockquote>,\r\n    'header-one': children => children.map(child => <h1>{child}</h1>),\r\n    'header-two': children => children.map(child => <h2>{child}</h2>),\r\n    'code-block': children => <pre style={styles.codeBlock}>{addBreaklines(children)}</pre>,\r\n    'unordered-list-item': children => <ul>{children.map(child => <li style={styles.listItem}>{child}</li>)}</ul>,\r\n    'ordered-list-item': children => <ol>{children.map(child => <li style={styles.listItem}>{child}</li>)}</ol>\r\n  },\r\n\r\n  /* Entities */\r\n  entities: {\r\n    Image: (children, data) => <div><img src={data.src} alt='' /></div>,\r\n    LINK: (children, data) => <RenderLink src={data.url} text={children} />,\r\n    LATEX: (children, data) => <LatexBlock content={data.content} />,\r\n    SPOILER: children => <Spoiler text={children[0]} />,\r\n    Video: (children, data) => <div><Media src={data.src} /></div>,\r\n    QuoteBlock: (children, data) => <QuoteBlock comment={data.props} />\r\n  }\r\n\r\n}\r\n\r\nexport default renderers\r\n","import React from 'react'\r\nimport redraft from 'redraft'\r\nimport renderers from './Renderers'\r\n\r\nconst RenderWarning = () => <div>Nothing to render.</div>;\r\n\r\nconst Renderer = ({ raw }) => {\n  if (!raw) { return <RenderWarning /> }\r\n\r\n  const rendered = redraft(raw, renderers)\r\n\r\n  if (!rendered)\r\n    return <RenderWarning />;\r\n\r\n  return <div>{rendered}</div>;\n}\r\n\r\nexport default Renderer;\r\n","import React from 'react'\r\nimport Renderer from '../../../DraftRenderer/DraftRenderer'\r\nimport './QuoteBlock.css'\r\n\r\nconst QuoteBlock = ({ comment }) => {\n  const rawContent = JSON.parse(comment.content)\r\n\r\n  return (\r\n  <blockquote cite={comment.author}>\r\n    <Renderer raw={rawContent} />\r\n  </blockquote>\r\n  )\n}\r\n\r\nexport default QuoteBlock\r\n","import React from 'react'\r\nimport QuoteBlock from './QuoteBlock'\r\n\r\nconst QuoteBlockWrapper = (props) => {\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0))\r\n\r\n  const comment = entity.getData().props\r\n\r\n  return (<QuoteBlock comment={comment} />)\n}\r\n\r\nexport default QuoteBlockWrapper\r\n","import React from 'react'\r\nimport { Tooltip } from 'antd'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport './css/StyleButton.css'\r\n\r\nconst StyleButton = (props) => {\r\n\r\n  const {\r\n   onToggle,\r\n   getInput,\r\n   activeFn,\r\n   icon,\r\n   style,\r\n   label\r\n  } = props\r\n\r\n  const isActive = activeFn(style);\r\n  const iconColor = isActive ? 'black' : 'gainsboro';\r\n  const iconStyle = { color: iconColor, marginTop: '6px' };\r\n\r\n  const toggleFn = (e) => {\r\n   e.preventDefault();\r\n   onToggle(style);\r\n  }\r\n\r\n  return (\r\n  <Tooltip placement='bottom' title={label} >\r\n    <button\r\n      className='StyleButton'\r\n      onClick={(blockName) => toggleFn(blockName, getInput)}\r\n     >\r\n      <FontAwesomeIcon\r\n        size='lg'\r\n        style={iconStyle}\r\n        icon={icon}\r\n      />\r\n    </button>\r\n  </Tooltip>\r\n  )\r\n}\r\n\r\nexport default StyleButton\r\n","import React, { Fragment } from 'react'\r\nimport { Input, Button } from 'antd'\r\n\r\nconst URLInput = ({\r\n  changeFn, urlValue, confirmFn, cancelFn, type\r\n}) => {\n  const hintText = `Enter ${type.toLowerCase()} URL`\r\n\r\n  return (\r\n  <Fragment>\r\n\r\n    <span >\r\n      <Input\r\n        name='URL input'\r\n        onChange={changeFn}\r\n        value={urlValue}\r\n        placeholder={hintText}\r\n        style={{ width: '400px', marginLeft: '40px', marginTop: '10px' }}\r\n      />\r\n    </span>\r\n\r\n    <span style={{ marginLeft: '8px' }}>\r\n      <Button type='primary' icon='close' onClick={cancelFn} style={{ marginRight: '2px' }} />\r\n      <Button type='primary' icon='check' onClick={confirmFn} />\r\n    </span>\r\n\r\n  </Fragment>\r\n  )\n}\r\n\r\nexport default URLInput\r\n","import React from 'react';\r\nimport StyleButton from './StyleButton';\r\nimport URLInput from './URLInput';\r\nimport './css/Controls.css';\r\n\r\nconst EditorControls = (props) => {\n\n  const {\n    editorStyles,\n    blockIsActive,\n    inlineIsActive,\n    customBlockIsActive,\n    customBlockToggleFn,\n    onToggleInline,\n    onToggleBlock,\n    confirmInput,\n    onInputChange,\n    showInput,\n    cancelInput,\n    inputVisible,\n    inputType,\n    inputValue,\n  } = props;\n  \n  if (inputVisible) {\r\n    return (\r\n    <div className='EditorControls'>\r\n       <div className='RichEditor-controls'>\r\n         <URLInput\r\n            changeFn={onInputChange}\r\n            urlValue={inputValue}\r\n            type={inputType}\r\n            cancelFn={cancelInput}\r\n            confirmFn={confirmInput}\r\n         />\r\n        </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n  <div className='EditorControls'>\r\n    <div className='RichEditor-controls'>\r\n      {editorStyles.INLINE_STYLES.map(type =>\r\n        (<StyleButton\r\n            key={type.label}\r\n            activeFn={inlineIsActive.bind(type.style)}\r\n            label={type.label}\r\n            onToggle={onToggleInline}\r\n            style={type.style}\r\n            icon={type.icon}\r\n        />))}\r\n        {editorStyles.BLOCK_TYPES.map(type =>\r\n          (<StyleButton\r\n            key={type.label}\r\n            activeFn={blockIsActive.bind(type.style)}\r\n            label={type.label}\r\n            onToggle={onToggleBlock}\r\n            style={type.style}\r\n            icon={type.icon}\r\n          />))}\r\n          {editorStyles.CUSTOM_STYLES.map(type =>\r\n            (<StyleButton\r\n              key={type.label}\r\n              activeFn={customBlockIsActive}\r\n              label={type.label}\r\n              onToggle={customBlockToggleFn}\r\n              getInput={showInput}\r\n              style={type.style}\r\n              icon={type.icon}\r\n          />))}\r\n      </div>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default EditorControls\r\n","import React from 'react'\r\nimport { Editor } from 'draft-js'\r\n\r\nconst BaseEditor = (config) => {\n\n  const AltEditor = config.altEditor;\r\n\r\n  if (AltEditor) {\n    return (\r\n    <AltEditor\r\n      blockStyleFn={config.getBlockStyle}\r\n      blockRendererFn={config.blockRendererFn}\r\n      blockRenderMap={config.blockRenderMap}\r\n      editorState={config.editorState}\r\n      handleKeyCommand={config.handleKeyCommand}\r\n      onChange={config.onChange}\r\n      ref={config.reference}\r\n      spellCheck={config.spellCheck}\r\n      readOnly={config.readOnly}\r\n    />\r\n    )\n  }\r\n\r\n  return (\r\n  <Editor\r\n    blockStyleFn={config.getBlockStyle}\r\n    blockRendererFn={config.blockRendererFn}\r\n    blockRenderMap={config.blockRenderMap}\r\n    editorState={config.editorState}\r\n    handleKeyCommand={config.handleKeyCommand}\r\n    onChange={config.onChange}\r\n    ref={config.reference}\r\n    spellCheck={config.spellCheck}\r\n    readOnly={config.readOnly}\r\n  />\r\n  )\r\n}\r\n\r\nexport default BaseEditor\n","export const getBlockStyle = (block) => {\r\n  let blockStyle = null\r\n\r\n  switch (block.getType()) {\r\n    case 'blockquote':\r\n      blockStyle = 'Blockquote'\r\n      break\r\n    case 'code-block':\r\n      blockStyle = 'Code'\r\n      break\r\n    default:\r\n      blockStyle = null\r\n  }\r\n\r\n  return blockStyle;\r\n\r\n}\r\n\r\nexport const findLinkEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity()\r\n      return (\r\n        entityKey !== null &&\r\n           contentState.getEntity(entityKey).getType() === 'LINK'\r\n      )\r\n    },\r\n    callback\r\n  )\r\n}\r\n\r\nexport const findSpoilerEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n  (character) => {\r\n    const entityKey = character.getEntity()\r\n    return (\r\n    entityKey !== null &&\r\n    contentState.getEntity(entityKey).getType() === 'SPOILER'\r\n    )\r\n  },\r\n  callback\r\n)\r\n}\r\n\r\nexport const filterStyle = (listToFilter, filter) => {\r\n  return listToFilter.filter(e =>filter.indexOf(e.style) !== -1);\r\n}\r\n\r\nexport const filterWhiteListedStyles = (styles, allowedStyles) => {\r\n  return {\r\n    BLOCK_TYPES: filterStyle(styles.BLOCK_TYPES, allowedStyles),\r\n    INLINE_STYLES: filterStyle(styles.INLINE_STYLES, allowedStyles),\r\n    CUSTOM_STYLES: filterStyle(styles.CUSTOM_STYLES, allowedStyles)\r\n  };\r\n}\r\n\r\n\r\n// element ==== \"SPOILER\"\r\nexport function getImmutableSelectionBlock(editorState, element) {\r\n  const selection = editorState.getSelection()\r\n  const contentBlock = editorState.getCurrentContent().getBlockForKey(selection.getStartKey())\r\n  const selectionState = editorState.getSelection()\r\n  const start = selectionState.getStartOffset()\r\n  const end = selectionState.getEndOffset()\r\n  const selectedText = contentBlock.getText().slice(start, end)\r\n  const contentState = editorState.getCurrentContent()\r\n\r\n  const contentStateWithEntity = contentState.createEntity(element, 'IMMUTABLE', { text: selectedText })\r\n\r\n  return {\r\n    editorState: editorState,\r\n    newContentState: contentStateWithEntity\r\n  };\r\n\r\n}\r\n","import React, { useState, useImperativeHandle } from 'react';\r\nimport Draft from 'draft-js';\r\nimport { Map } from 'immutable';\r\nimport 'katex/dist/katex.css';\r\nimport getTexBlock from './TextElements/Latex/insertTeXBlock';\r\nimport removeTeXBlock from './TextElements/Latex/removeTeXBlock';\r\nimport TeXBlock from './TextElements/Latex/TeXBlock';\r\nimport Spoiler from './TextElements/Spoiler/SpoilerWrapper';\r\nimport Media from './TextElements/Media/Media';\r\nimport Link from './TextElements/Link/Link';\r\nimport editorStyles from './EditorStyles';\r\nimport QuoteBlockWrapper from './TextElements/QuoteBlock/QuoteBlockWrapper';\r\nimport EditorControls from './Controls';\r\nimport BaseEditor from './BaseEditor';\r\nimport {\r\n  getBlockStyle,\r\n  findLinkEntities,\r\n  findSpoilerEntities,\r\n  filterWhiteListedStyles,\r\n  getImmutableSelectionBlock\r\n} from './utils';\r\n\r\nimport './css/Draft.css'\r\nimport './css/Editor.css'\r\n\r\nconst {\r\n  CompositeDecorator,\r\n  ContentState,\r\n  EditorState,\r\n  RichUtils,\r\n  DefaultDraftBlockRenderMap,\r\n  convertToRaw,\r\n  convertFromRaw,\r\n  AtomicBlockUtils\r\n} = Draft;\r\n\r\nconst blockRenderMap = Map({\r\n  SPOILER: { element: Spoiler },\r\n  LATEX: { element: TeXBlock }\r\n});\r\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap)\r\n\r\nconst EditorComponent = (props) => {\n\r\n  const { altEditor, initialState, containerRef } = props;\r\n\r\n  let decorator = null;\r\n  let initialStateEditor;\r\n\r\n  if (!altEditor) {\r\n   decorator = new CompositeDecorator([\r\n     {\r\n       strategy: (contentBlock, callback, contentState) =>\r\n       findLinkEntities(contentBlock, callback, contentState),\r\n       component: Link\r\n     },\r\n     {\r\n       strategy: (contentBlock, callback, contentState) =>\r\n       findSpoilerEntities(contentBlock, callback, contentState),\r\n       component: Spoiler\r\n     }\r\n   ])\r\n  }\r\n\r\n  const { createEmpty, createWithContent } = EditorState;\r\n\r\n  if (initialState == null) {\r\n    initialStateEditor = createEmpty(decorator)\r\n  } else {\r\n   const parsedState = JSON.parse(initialState);\r\n   const contentState = convertFromRaw(parsedState);\r\n   initialStateEditor = createWithContent(contentState, decorator);\r\n  }\r\n\r\n  // State and refs.\r\n  const [texEdits, setTexEdits] = useState(Map());\r\n  const [editorState, setEditorState] = useState(initialStateEditor);\r\n  const [inputVisible, setInputVisible] = useState(false);\r\n  const [inputType, setInputType] = useState('');\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // Functions.\r\n  const focus = () => console.log(\"FOCUS!\"); //props.containerRef.current.focus();\r\n  const getCurrentContent = () => editorState.getCurrentContent();\r\n  const customBlockIsActive = () => false; // TODO: revise.\r\n\r\n  let _editorStyles = null;\r\n\r\n  // If the user has defined which styles to whitelist, use only those.\r\n  // Otherwise use all of the styles.\r\n  let filterStyles = (props.filterStyles === undefined)\r\n  ? null: props.filterStyles;\r\n\r\n  if(filterStyles === null) {\r\n    _editorStyles = editorStyles;\r\n  } else {\r\n   const whiteListed = filterWhiteListedStyles(editorStyles, props.filterStyles);\r\n   _editorStyles = whiteListed;\r\n  }\r\n\r\n  const getContent = () => {\r\n    const currentContent = getCurrentContent();\r\n    return convertToRaw(currentContent);\r\n  }\r\n\r\n  const getPlainText = () => {\r\n    return getCurrentContent().getPlainText();\r\n  }\r\n\r\n  const removeTex = (blockKey) => {\r\n    setTexEdits(texEdits.remove(blockKey));\r\n    setEditorState(removeTeXBlock(editorState, blockKey));\r\n  };\r\n\r\n  const insertTex = (blockKey, newContentState) => {\r\n    const { createWithContent } = EditorState;\r\n    const texEditState = texEdits.remove(blockKey);\r\n    const editorContent = createWithContent(newContentState);\r\n    setTexEdits(texEditState);\r\n    setEditorState(editorContent);\r\n  }\r\n\r\n  const blockIsActive = (block) => {\r\n    const selection = editorState.getSelection();\r\n    const blockType = editorState.getCurrentContent()\r\n      .getBlockForKey(selection.getStartKey())\r\n      .getType();\r\n\r\n    return block === blockType;\r\n  }\r\n\r\n  const inlineIsActive = (style) => {\r\n\r\n   const currentStyle = editorState.getCurrentInlineStyle();\r\n\r\n   if (currentStyle === undefined)\r\n      return false;\r\n\r\n   return currentStyle.has(style);\r\n  }\r\n\r\n  /*\r\n  static customBlockIsActiveFn(block) {\r\n    return false;\r\n  } */\r\n\r\n  const onChange = (state) => {\r\n    setEditorState(state);\r\n  }\r\n\r\n  const handleKeyCommand = (command) => {\r\n\r\n    const {handleKeyCommand} = RichUtils;\r\n    const newState = handleKeyCommand(editorState, command);\r\n\r\n    if (newState) {\r\n      onChange(newState);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  const customRenderFn = (contentBlock) => {\r\n\r\n    const type = contentBlock.getType();\r\n    const text = contentBlock.getText();\r\n\r\n    if (text === 'media' || text === 'Image' || text === 'Video') {\r\n      return {\r\n        component: Media,\r\n        editable: false\r\n      }\r\n    }\r\n\r\n    if (text === 'QuoteBlock') {\r\n      return {\r\n        component: QuoteBlockWrapper,\r\n        editable: false\r\n      }\r\n    }\r\n\r\n    if (type === 'atomic') {\r\n      return {\r\n        component: TeXBlock,\r\n        editable: false,\r\n        props: {\r\n          onStartEdit: (blockKey) => {\r\n            const texEditState = texEdits.set(blockKey, true);\r\n            setTexEdits(texEditState);\r\n          },\r\n          onFinishEdit: (blockKey, newContentState) => insertTex(blockKey, newContentState),\r\n          onRemove: blockKey => removeTex(blockKey)\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  const selectionIsCollapsed = () => {\r\n    return editorState.getSelection().isCollapsed();\r\n  }\r\n\r\n  const findStyleObjectByName = (name) => {\r\n    const customStyles = editorStyles.CUSTOM_STYLES;\r\n    const matches = customStyles.filter(style =>\r\n      (style.label === name || style.style === name)\r\n    )\r\n\r\n    return matches[0];\r\n  }\r\n\r\n  // TODO: this has been implemented using toggleLink.\r\n  // Should editorState be a parameter or not?\r\n  const insertEntity = (selectionState) => {\r\n      const { editorState, newContentState } = selectionState;\r\n      const entityKey = newContentState.getLastCreatedEntityKey();\r\n      const newEditorState = EditorState.set(editorState, {\r\n         currentContent: newContentState\r\n       });\r\n      const newState = RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey);\r\n      setEditorState(newState, () => { setTimeout(() => focus(), 0) });\r\n  }\r\n\r\n  const customBlockToggleFn = (blockName, getInput) => {\r\n\r\n    const selectionCollapsed = selectionIsCollapsed();\r\n    const styleObject = findStyleObjectByName(blockName);\r\n    const { requiresSelection } = styleObject;\r\n\r\n    if (styleObject.toggleFn === null)\r\n       return;\r\n\r\n    if (requiresSelection && selectionCollapsed)\r\n       return;\r\n\r\n    if (styleObject.requiresInput) {\r\n      setInputVisible(true);\r\n      setInputType(styleObject.label);\r\n      return;\r\n    }\r\n\r\n    toggleCustomStyle(styleObject);\r\n  }\r\n\r\n  const confirmInput = (e) => {\r\n    e.preventDefault()\r\n\r\n    const styleObject = findStyleObjectByName(inputType);\r\n\r\n    if (styleObject.toggleFn == null)\r\n       return;\r\n\r\n    const newState = styleObject.toggleFn(editorState, inputType, inputValue);\r\n\r\n    // Reset input fields.\r\n    setInputVisible(false);\r\n    setInputValue('');\r\n    setInputType('');\r\n\r\n    // Set the new editor state.\r\n    if(newState !== null)\r\n      setEditorState(newState);\r\n\r\n  }\r\n\r\n  const onInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const cancelInput = () => {\r\n    setInputVisible(false);\r\n    setInputValue('');\r\n    setInputType('');\r\n  }\r\n\r\n  const showInput = () => setInputVisible(true);\r\n\r\n  const insertCustomBlock = (block) => {\r\n\r\n    const { type, mutability, content } = block;\r\n\r\n    const { insertAtomicBlock } = AtomicBlockUtils;\r\n\r\n    const contentStateWithEntity = contentState.createEntity(type, mutability, content);\r\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n\r\n    const newEditorState = EditorState.set(\r\n      editorState,\r\n      { currentContent: contentStateWithEntity }\r\n    );\r\n\r\n    return insertAtomicBlock(newEditorState, entityKey, ' ');\r\n  }\r\n\r\n  const toggleCustomStyle = (styleObject) => {\r\n\r\n    let newState = null;\r\n\r\n    switch(styleObject.style.toUpperCase()) {\r\n\r\n        case 'SPOILER':\r\n          const _selection = getImmutableSelectionBlock(editorState, 'SPOILER');\r\n          insertEntity(_selection);\r\n          break;\r\n\r\n        case 'LATEX':\r\n          const texBlock = getTexBlock();\r\n          newState = insertCustomBlock(texBlock);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n    }\r\n\r\n    if(newState !== null)\r\n      setEditorState(newState);\r\n\r\n  }\r\n\r\n  const toggleBlockType = (blockType) => {\r\n    const { toggleBlockType } = RichUtils;\r\n    onChange(toggleBlockType(editorState, blockType));\r\n  }\r\n\r\n  const toggleInlineStyle = (inlineStyle) => {\r\n    const { toggleInlineStyle } = RichUtils;\r\n    onChange(toggleInlineStyle(editorState, inlineStyle))\r\n  }\r\n\r\n  // TODO: check this out.\r\n  // If the user changes block type before entering any text, we can\r\n  // either style the placeholder or hide it. Let's just hide it now.\r\n  let className = 'RichEditor-editor Editor';\r\n  const contentState = editorState.getCurrentContent()\r\n\r\n  if (!contentState.hasText()) {\r\n    if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n      className += ' RichEditor-hidePlaceholder Editor'\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n   const emptyState = ContentState.createFromText('');\r\n   const clearedState = EditorState.push(editorState, emptyState);\r\n   setTexEdits(Map());\r\n   setEditorState(clearedState);\r\n  }\r\n\r\n  // Exposed methods.\r\n  useImperativeHandle(containerRef, () => {\r\n    return {\r\n     clear: clear,\r\n     getContent: getContent,\r\n     getPlainText: getPlainText\r\n    }\r\n  });\r\n\r\n  return (\r\n  <div style={{ height: '100%' }} ref={containerRef}>\r\n    <EditorControls\r\n      editorState={editorState}\r\n      editorStyles={_editorStyles}\r\n      onToggleBlock={toggleBlockType}\r\n      onToggleInline={toggleInlineStyle}\r\n      selectionCollapsed={selectionIsCollapsed}\r\n      blockIsActive={blockIsActive}\r\n      inlineIsActive={inlineIsActive}\r\n      customBlockIsActive={customBlockIsActive}\r\n      customBlockToggleFn={customBlockToggleFn}\r\n      editor={containerRef}\r\n      inputType={inputType}\r\n      inputVisible={inputVisible}\r\n      inputValue={inputValue}\r\n      confirmInput={confirmInput}\r\n      onInputChange={onInputChange}\r\n      cancelInput={cancelInput}\r\n      showInput={showInput}\r\n    />\r\n    <div\r\n      className={className}\r\n      onClick={focus}\r\n      role='textbox'\r\n      tabIndex={0}\r\n     >\r\n      <BaseEditor\r\n        blockStyleFn={getBlockStyle}\r\n        blockRendererFn={customRenderFn}\r\n        blockRenderMap={extendedBlockRenderMap}\r\n        editorState={editorState}\r\n        handleKeyCommand={handleKeyCommand}\r\n        onChange={onChange}\r\n        spellCheck={false}\r\n        readOnly={texEdits.count()}\r\n        altEditor={altEditor}\r\n      />\r\n    </div>\r\n\r\n  </div>\r\n  );\r\n\r\n}\r\n\r\nexport default EditorComponent;\r\n","/**\r\n * Copyright (c) 2013-present, Facebook, Inc. All rights reserved.\r\n *\r\n * This file provided by Facebook is for non-commercial testing and evaluation\r\n * purposes only. Facebook reserves all rights not expressly granted.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nimport { EditorState, Modifier, SelectionState } from 'draft-js'\r\n\r\nexport default function removeTeXBlock (editorState, blockKey) {\r\n  const content = editorState.getCurrentContent()\r\n  const block = content.getBlockForKey(blockKey)\r\n\r\n  const targetRange = new SelectionState({\r\n    anchorKey: blockKey,\r\n    anchorOffset: 0,\r\n    focusKey: blockKey,\r\n    focusOffset: block.getLength()\r\n  })\r\n\r\n  const withoutTeX = Modifier.removeRange(content, targetRange, 'backward')\r\n  const resetBlock = Modifier.setBlockType(\r\n    withoutTeX,\r\n    withoutTeX.getSelectionAfter(),\r\n    'unstyled'\r\n  )\r\n\r\n  const newState = EditorState.push(editorState, resetBlock, 'remove-range')\r\n  return EditorState.forceSelection(newState, resetBlock.getSelectionAfter())\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport Editor from './lib/Editor/Editor';\r\nimport { Button, Card, Menu, Table } from 'antd';\r\nimport './App.css';\r\n\r\nconst ButtonGroup = Button.Group;\r\n\r\nconst editorUsageCodeClass =\r\n`import Editor from 'elementary-editor';\r\n class MyComponent extends Component  {\r\n\r\n   constructor(props) {\r\n     super(props);\r\n     this.state = { editorState: null }\r\n     this.containerRef = null;\r\n   }\r\n\r\n   render() {\r\n     return(\r\n     <div>\r\n       <Editor\r\n         initialState={null}\r\n         containerRef={(editor) => this.editor = editor}\r\n      />\r\n     );\r\n   }\r\n  }\r\n`;\r\n\r\nconst editorUsageCodeHooks =\r\n`\r\nimport React, { useRef } from 'react';\r\nimport Editor from 'elementary-editor';\r\n\r\nconst MyComponent = () =>  {\r\n\r\n const containerRef = useRef(null);\r\n\r\n return(\r\n <div>\r\n   <Editor\r\n     initialState={null}\r\n     containerRef={containerRef}\r\n   />\r\n </div>\r\n  );\r\n}`;\r\n\r\nconst editorProps = [\r\n   {name: \"initialState\", type: \"JSON string\", default: \"null\", description: \"A draft-js rawState object with the initial state of the editor. If set to null it will initialize the editor with no text.\"},\r\n   {name: \"filterStyles\", type: \"string[]\", default: \"null\", description: \"A list of the styles the editor will use. If set it will only use those styles. If the parameter is null or isn't specified, all the available styles will be used.\"}\r\n];\r\n\r\nconst editorPropsColumns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name'\r\n  },\r\n  {\r\n\ttitle: 'Type',\r\n\tdataIndex: 'type',\r\n\tkey: 'type',\r\n  },\r\n  {\r\n\ttitle: 'Default',\r\n\tdataIndex: 'default',\r\n\tkey: 'default',\r\n  },\r\n  {\r\n\ttitle: 'description',\r\n\tdataIndex: 'description',\r\n\tkey: 'description',\r\n  }\r\n];\r\n\r\nconst editorMethodsColumns = [\r\n {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name'\r\n  },\r\n  {\r\n\ttitle: 'Parameters',\r\n\tdataIndex: 'parameters',\r\n\tkey: 'parameters',\r\n  },\r\n  {\r\n\ttitle: 'description',\r\n\tdataIndex: 'description',\r\n\tkey: 'description',\r\n  }\r\n];\r\n\r\nconst editorMethods = [\r\n  {\r\n\tname: \"getContent\",\r\n\tparameters: \"-\",\r\n\tdescription: \"Gets the current DraftJS raw editor state.\"\r\n  },\r\n  {\r\n  name: \"getPlainText\",\r\n  parameters: \"-\",\r\n  description: \"Gets the current editor content as plain text.\"\r\n  },\r\n  {\r\n\tname: \"clear\",\r\n\tparameters: \"-\",\r\n\tdescription: \"Clears the editor.\"\r\n  }\r\n];\r\n\r\nconst App = () => {\r\n\r\n const [editorState, setEditorState] = useState(null);\r\n const containerRef = useRef(null);\r\n\r\n const clearEditor = () => {\r\n   containerRef.current.clear();\r\n }\r\n\r\n const logState = () => {\r\n   const currentState = containerRef.current.getContent();\r\n   const jsonState = JSON.stringify(currentState);\r\n   setEditorState(jsonState);\r\n }\r\n\r\n const getPlainText = () => {\r\n   const plaintext = containerRef.current.getPlainText();\r\n   setEditorState(plaintext);\r\n }\r\n\r\n return (\r\n <div className=\"App\">\r\n\r\n   <div>\r\n     <Menu theme=\"dark\">\r\n       <h2 className=\"EditorNavbarText\">\r\n    \t  &nbsp;\r\n    \t </h2>\r\n  \t </Menu>\r\n\t </div>\r\n\r\n\t<div className=\"DocSection\">\r\n\t\t  <h2 className=\"SectionTitle\">Elementary Editor</h2>\r\n\t\t  <ol>\r\n\t\t\t<li><a href=\"#intro\">Introduction</a></li>\r\n\t\t\t<li><a href=\"#use\">How to use</a></li>\r\n\t\t\t<li><a href=\"#api\">API reference</a></li>\r\n\t\t\t<li><a href=\"#demo\">Play with the editor</a></li>\r\n\t\t\t<li><a href=\"#built-with\">Built with</a></li>\r\n\t\t  </ol>\r\n\t\t</div>\r\n\r\n\t\t<div className=\"DocSection\" id=\"intro\">\r\n\t\t  <h2 className=\"SectionTitle\">Introduction</h2>\r\n\t\t  <h3>So what is this, anyway?</h3>\r\n\t\t  <p>Elementary editor is a WYSWYG (What you see is what you get)\r\n  \t\t     text editor based on DraftJS and React (using AntD for styling).\r\n\t\t  </p>\r\n\t\t  <p>\r\n\t\t  </p>\r\n\t\t</div>\r\n\r\n\t\t<div className=\"DocSection\" id=\"use\">\r\n\t\t  <h2 className=\"SectionTitle\">Usage</h2>\r\n\t\t  <p>To use this editor in your project, first install the npm package:</p>\r\n   \t\t  <pre className=\"CodeSection\">yarn add elementary-editor</pre>\r\n\t\t  <br />\r\n\t\t  <p>Then use the editor inside your code</p>\r\n      <h3>Using classes</h3>\r\n\t\t  <pre className=\"CodeSection\">\r\n  \t\t\t<code>\r\n  \t\t\t{editorUsageCodeClass}\r\n  \t\t\t</code>\r\n\t\t  </pre>\r\n      <br />\r\n      <h3>Using hooks</h3>\r\n      <br />\r\n      <pre className=\"CodeSection\">\r\n        <code>\r\n        {editorUsageCodeHooks}\r\n        </code>\r\n      </pre>\r\n\t\t  <br />\r\n\t\t  <p>\r\n\t\t  The ref property is needed if you want to access the editor's internal methods.\r\n\t\t  </p>\r\n\t\t</div>\r\n\r\n\t\t<div className=\"DocSection\" id=\"api\">\r\n\t\t  <h2 className=\"SectionTitle\">API Reference</h2>\r\n\t\t  <div>\r\n\t\t    <h3>Properties</h3>\r\n   \t\t    <p>The editor exposes the following properties:</p>\r\n\t\t    <br />\r\n\t\t    <Table\r\n\t\t\t  columns={editorPropsColumns}\r\n\t\t\t  dataSource={editorProps}\r\n\t\t\t  pagination={false}\r\n\t\t    />\r\n\t\t  </div>\r\n\r\n\t\t  <div className=\"MethodsDoc\">\r\n\t\t    <h3>Methods</h3>\r\n   \t\t    <p>The editor exposes the following methods:</p>\r\n\t\t    <br />\r\n\t\t    <Table\r\n\t\t\t  columns={editorMethodsColumns}\r\n\t\t\t  dataSource={editorMethods}\r\n\t\t\t  pagination={false}\r\n\t\t    />\r\n\t\t  </div>\r\n\r\n\t\t</div>\r\n        <div className=\"DocSection\" id=\"demo\">\r\n\t\t  <h2 className=\"SectionTitle\">Demo</h2>\r\n\t\t  <div>\r\n\t\t   <div className=\"EditorContainer\">\r\n\t\t\t <Editor\r\n\t\t\t    initialState={null}\r\n\t\t\t\t  containerRef={containerRef}\r\n\t\t\t />\r\n\t\t   </div>\r\n\t\t </div>\r\n\r\n\t\t <div>\r\n\t\t\t<ButtonGroup className=\"LogStateButton\">\r\n\t\t\t\t<Button type=\"primary\" onClick={clearEditor}>\r\n\t\t\t\t   Clear editor\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button type=\"primary\" onClick={logState}>\r\n\t\t\t\t\t Log State\r\n\t\t\t\t</Button>\r\n        <Button type=\"primary\" onClick={getPlainText}>\r\n\t\t\t\t\t Log plain text\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t </div>\r\n\t\t <div className=\"LogStateResult\">\r\n\t\t\t<Card>\r\n\t\t\t  <p>\r\n\t\t\t\t{editorState != null ?\r\n\t\t\t\t editorState : \"Press 'Log state' to log the current state.\"\r\n\t\t\t\t}\r\n\t\t\t  </p>\r\n\t\t\t</Card>\r\n\t\t </div>\r\n   \t  </div>\r\n\t  <div className=\"DocSection\" id=\"built-with\">\r\n\t\t  <h2 className=\"SectionTitle\">Technologies used</h2>\r\n\t\t  <h3>Elementary Editor was built with:</h3>\r\n\t\t  <br />\r\n\t\t  <p>\r\n\t\t   <a href=\"https://facebook.github.io/react/\">React</a> - A Javascript library for building user interfaces.\r\n\t\t  </p>\r\n\t\t  <p>\r\n\t\t   <a href=\"https://draftjs.org/\">Draft-JS</a> - Rich text editor framework for React.\r\n\t\t  </p>\r\n\t\t  <p>\r\n\t\t   <a href=\"https://ant.design/\">ANT.Design</a> - A UI Design Language.\r\n\t\t  </p>\r\n\t  </div>\r\n\t  <br />\r\n\t  <br />\r\n\t  <br />\r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}